{"version":3,"sources":["file:///Users/alex/git/cocos/EndlessRunner/assets/scripts/Hero.ts"],"names":["_decorator","Component","input","Input","Collider2D","Contact2DType","KeyCode","Vec2","RigidBody2D","Sprite","Animation","ccclass","property","Hero","isJumping","jumpKeyPressed","touchingGround","jumpFinished","startJumpY","animation","body","onLoad","on","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","TOUCH_START","onTouchStart","TOUCH_END","onTouchEnd","collider","getComponent","BEGIN_CONTACT","onBeginContact","END_CONTACT","onEndContact","event","keyCode","SPACE","start","node","update","deltaTime","jump","animate","selfCollider","otherCollider","contact","name","setTimeout","destroy","emit","position","y","linearVelocity","jumpSpeed","jumpMaxHeight","getState","isPlaying","play","stop","spriteFrame","jumpSprite"],"mappings":"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","sourcesContent":["import { _decorator, Component, input, Input, EventKeyboard, EventTouch, Collider2D, Contact2DType, \n    IPhysics2DContact, PhysicsSystem2D, KeyCode, Node, Vec2, RigidBody, RigidBody2D, Vec3, Sprite, Animation } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Hero')\nexport class Hero extends Component {\n\n    private isJumping=false;\n    private jumpKeyPressed = false;\n    private touchingGround = false;\n    private jumpFinished = false;\n    private startJumpY = 0.0;\n    private animation:Animation;\n    @property\n    public jumpSpeed:Vec2 = new Vec2(0.0, 300.0);\n    @property\n    public jumpMaxHeight = 300;\n    @property(Sprite)\n    public jumpSprite:Sprite;\n    private body : RigidBody2D;\n\n    protected onLoad(): void {\n        input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);\n        input.on(Input.EventType.KEY_UP, this.onKeyUp, this);\n        input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);\n        input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\n\n        // Registering callback functions for a single collider\n        let collider = this.getComponent(Collider2D);\n        if (collider) {\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n            collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\n        }\n\n        // Registering global contact callback functions\n        //if (PhysicsSystem2D.instance) {\n        //    PhysicsSystem2D.instance.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        //}\n    }\n\n    onKeyDown (event: EventKeyboard) {\n        switch(event.keyCode) {\n            case KeyCode.SPACE:\n                this.jumpKeyPressed = true;\n                break;\n        }\n    }\n    onKeyUp (event: EventKeyboard) {\n        switch(event.keyCode) {\n            case KeyCode.SPACE:\n                this.isJumping = false;\n                this.jumpKeyPressed = false;\n                break;\n        }\n    }\n\n    onTouchStart(event: EventTouch) {\n        this.jumpKeyPressed = true;\n    }\n\n    onTouchEnd(event: EventTouch) {\n        this.isJumping = false;\n        this.jumpKeyPressed = false;\n    }\n\n\n    start() {\n        this.isJumping = false;\n        this.jumpKeyPressed = false;\n        this.touchingGround = false;\n        this.body = this.getComponent(RigidBody2D);\n        this.animation = this.node.getComponent(Animation);\n    }\n\n    update(deltaTime: number) {\n        if (this.jumpKeyPressed) {\n            this.jump(deltaTime);\n        }\n        this.animate();\n    }\n\n    onBeginContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\n        // will be called once when two colliders begin to contact\n        if (otherCollider.name == 'platform') {\n            this.touchingGround = true;\n        } \n        if (otherCollider.name == 'diamond') {\n            setTimeout(() => {\n                otherCollider.node.destroy();\n            }, 1);\n            this.node.emit('score');\n        } \n    }\n    onEndContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\n        // will be called once when two colliders begin to contact\n        if (otherCollider.name == 'platform') {\n            this.touchingGround = false;\n        }\n    }\n\n    jump(deltaTime: number) {\n        if (this.touchingGround) {\n            this.startJumpY = this.node.position.y;    \n            this.isJumping = true;\n            this.jumpFinished = false;\n            this.body.linearVelocity = this.jumpSpeed;    \n        } else if (this.isJumping && !this.jumpFinished) {\n            if (this.node.position.y < this.startJumpY + this.jumpMaxHeight) {\n                this.body.linearVelocity = this.jumpSpeed;    \n            } else {\n                this.jumpFinished = true;\n            }\n        }\n    }\n    animate() {\n        if (this.touchingGround) {\n            // hero is running on the platform\n            if (!this.animation.getState(\"walkjing\").isPlaying) {\n                this.animation.getState(\"walkjing\").play();\n            }\n        } else {\n            // the hero is jumping\n            if (this.animation.getState(\"walkjing\").isPlaying) {\n                this.animation.getState(\"walkjing\").stop();\n                this.getComponent(Sprite).spriteFrame = this.jumpSprite.spriteFrame;\n            }\n        }\n    }\n}"]}